#include "FIR.h"
#include "WavReader.h"

#include <vector>
#include <math.h>

#define TWO_X_FILTER_LENGTH 47
#define FOUR_X_FILTER_LENGTH 47
#define EIGHT_X_FILTER_LENGTH 47

const float filterTaps2x[TWO_X_FILTER_LENGTH] = {
     -0.014025255803479755,
        0.000000000000000072,
        0.015360994451430207,
        -0.000000000000000020,
        -0.016977941235791282,
        0.000000000000000020,
        0.018975346087060842,
        -0.000000000000000020,
        -0.021505392232002291,
        0.000000000000000020,
        0.024813914113848794,
        -0.000000000000000020,
        -0.029325534861821306,
        0.000000000000000020,
        0.035842320386670484,
        -0.000000000000000020,
        -0.046082983354290619,
        0.000000000000000020,
        0.064516176696006872,
        -0.000000000000000020,
        -0.107526961160011453,
        0.000000000000000020,
        0.322580883480034386,
        0.506708866864690521,
        0.322580883480034386,
        0.000000000000000020,
        -0.107526961160011453,
        -0.000000000000000020,
        0.064516176696006872,
        0.000000000000000020,
        -0.046082983354290619,
        -0.000000000000000020,
        0.035842320386670484,
        0.000000000000000020,
        -0.029325534861821306,
        -0.000000000000000020,
        0.024813914113848794,
        0.000000000000000020,
        -0.021505392232002291,
        -0.000000000000000020,
        0.018975346087060842,
        0.000000000000000020,
        -0.016977941235791282,
        -0.000000000000000020,
        0.015360994451430207,
        0.000000000000000072,
        -0.014025255803479755
};

const float filterTaps4x[FOUR_X_FILTER_LENGTH] = {
    -0.010107836514313030,
    -0.014944395825009246,
    -0.011070487610914252,
    0.000000000000000010,
    0.012235802096273665,
    0.018265372675011302,
    0.013675308225247021,
    -0.000000000000000010,
    -0.015498682655279974,
    -0.023484050582157384,
    -0.017883095371476875,
    0.000000000000000010,
    0.021134567257199963,
    0.032877670815020341,
    0.025831137758799912,
    -0.000000000000000010,
    -0.033211462832742761,
    -0.054796118025033896,
    -0.046496047965839851,
    0.000000000000000010,
    0.077493413276399761,
    0.164388354075101689,
    0.232480239829199270,
    0.258220622749028628,
    0.232480239829199270,
    0.164388354075101689,
    0.077493413276399761,
    0.000000000000000010,
    -0.046496047965839851,
    -0.054796118025033896,
    -0.033211462832742761,
    -0.000000000000000010,
    0.025831137758799912,
    0.032877670815020341,
    0.021134567257199963,
    0.000000000000000010,
    -0.017883095371476875,
    -0.023484050582157384,
    -0.015498682655279974,
    -0.000000000000000010,
    0.013675308225247021,
    0.018265372675011302,
    0.012235802096273665,
    0.000000000000000010,
    -0.011070487610914252,
    -0.014944395825009246,
    -0.010107836514313030
    };

const float filterTaps8x[EIGHT_X_FILTER_LENGTH] = {
    0.004971453326119929,
    0.009603595583750844,
    0.013145211953635312,
    0.014939688634295463,
    0.014528918475070604,
    0.011737727935695457,
    0.006726083911809307,
    -0.000000000000000005,
    -0.007622895100050557,
    -0.015091364488751308,
    -0.021234573155872422,
    -0.024899481057159105,
    -0.025095404638758319,
    -0.021127910284251827,
    -0.012704825166750904,
    0.000000000000000005,
    0.016334775214394030,
    0.035213183807086379,
    0.055209890205268307,
    0.074698443171477322,
    0.092016483675447194,
    0.105639551421259137,
    0.114343426500758169,
    0.117336040151053894,
    0.114343426500758169,
    0.105639551421259137,
    0.092016483675447194,
    0.074698443171477322,
    0.055209890205268307,
    0.035213183807086379,
    0.016334775214394030,
    0.000000000000000005,
    -0.012704825166750904,
    -0.021127910284251827,
    -0.025095404638758319,
    -0.024899481057159105,
    -0.021234573155872422,
    -0.015091364488751308,
    -0.007622895100050557,
    -0.000000000000000005,
    0.006726083911809307,
    0.011737727935695457,
    0.014528918475070604,
    0.014939688634295463,
    0.013145211953635312,
    0.009603595583750844,
    0.004971453326119929
};

FIR::FIR() {}

void FIR::setSamplerate(float samplerate_) {
    samplerate = samplerate_;
}

void FIR::setOversampling(int oversampling_) {
    oversampling = oversampling_;
    FIRbuffer.clear();
    FIRsample.clear();
    switch (oversampling) {
        case 2:
            for (size_t i = 0; i < TWO_X_FILTER_LENGTH; i++) {
                FIRbuffer.push_back(0);
                FIRsample.push_back(filterTaps2x[i]);
            }
            break;
        case 4:
            for (size_t i = 0; i < FOUR_X_FILTER_LENGTH; i++) {
                FIRbuffer.push_back(0);
                FIRsample.push_back(filterTaps4x[i]);
            }
            break;
        case 8:
            for (size_t i = 0; i < EIGHT_X_FILTER_LENGTH; i++) {
                FIRbuffer.push_back(0);
                FIRsample.push_back(filterTaps8x[i]);
            }
            break;
        default:
            oversampling = 1;
    }
}

float FIR::processSample(float input) {
    if (oversampling == 1) {
        return input;
    }

    float temple = 0;

    FIRbuffer[FIRbufferIndex] = input;

    size_t firsize = FIRbuffer.size();

    for (size_t j = 0; j < FIRbuffer.size(); j++) {
        int tempIndex = (FIRbufferIndex - j + FIRbuffer.size()) % FIRbuffer.size();
        temple += float(FIRbuffer[tempIndex]) * float(FIRsample[j]);
    }

    if (largestSample < fabs(temple)) {
        largestSample = fabs(temple);
    }
    
    
    FIRbufferIndex++;
    if (FIRbufferIndex >= FIRsample.size()) {
        FIRbufferIndex = 0;
    }

    return temple;
}

float FIR::getLargestSample() {
    return std::max(1.0f, largestSample);
}