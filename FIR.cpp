#include "FIR.h"
#include "WavReader.h"

#include <vector>
#include <math.h>

FIR::FIR() {}

FIR::FIR(float samplerate_) {
    samplerate = samplerate_;

    static double filter_taps[77] = {
    0.000000000000000000,
    -0.000005715513925596,
    -0.000023873743705968,
    -0.000055435737246982,
    -0.000100454943103072,
    -0.000157805811480818,
    -0.000224843014003277,
    -0.000297011128912336,
    -0.000367436166339108,
    -0.000426540018302639,
    -0.000461725714530467,
    -0.000457184345328679,
    -0.000393873053505839,
    -0.000249707321826989,
    0.000000000000000000,
    0.000381835368707879,
    0.000923317467001222,
    0.001651687042897845,
    0.002592495053274723,
    0.003768050214723602,
    0.005195804199029689,
    0.006886765773971825,
    0.008844042922418409,
    0.011061613446091143,
    0.013523419264072174,
    0.016202867511550232,
    0.019062803086178290,
    0.022055993410306927,
    0.025126138235818496,
    0.028209387013868856,
    0.031236315612621517,
    0.034134285016596759,
    0.036830079060520451,
    0.039252698030204855,
    0.041336171576577568,
    0.043022248881896617,
    0.044262826925808012,
    0.045021989005102028,
    0.045277544785944902,
    0.045021989005102028,
    0.044262826925808012,
    0.043022248881896624,
    0.041336171576577568,
    0.039252698030204855,
    0.036830079060520465,
    0.034134285016596759,
    0.031236315612621531,
    0.028209387013868856,
    0.025126138235818506,
    0.022055993410306934,
    0.019062803086178290,
    0.016202867511550239,
    0.013523419264072169,
    0.011061613446091146,
    0.008844042922418412,
    0.006886765773971823,
    0.005195804199029692,
    0.003768050214723604,
    0.002592495053274723,
    0.001651687042897846,
    0.000923317467001223,
    0.000381835368707880,
    0.000000000000000000,
    -0.000249707321826989,
    -0.000393873053505840,
    -0.000457184345328679,
    -0.000461725714530467,
    -0.000426540018302640,
    -0.000367436166339108,
    -0.000297011128912336,
    -0.000224843014003278,
    -0.000157805811480818,
    -0.000100454943103072,
    -0.000055435737246982,
    -0.000023873743705968,
    -0.000005715513925595,
    0.000000000000000000
    };

    for (size_t i = 0; i < 77; i++) {
        FIRbuffer.push_back(0);
        FIRsample.push_back(filter_taps[i]);
    }

}

float FIR::processSample(float input) {
    float temple = 0;

    FIRbuffer[FIRbufferIndex] = input;

    size_t firsize = FIRbuffer.size();

    for (size_t j = 0; j < FIRbuffer.size(); j++) {
        int tempIndex = (FIRbufferIndex - j + FIRbuffer.size()) % FIRbuffer.size();
        temple += float(FIRbuffer[tempIndex]) * float(FIRsample[j]);
    }

    if (largestSample < fabs(temple)) {
        largestSample = fabs(temple);
    }
    
    
    FIRbufferIndex++;
    if (FIRbufferIndex >= FIRsample.size()) {
        FIRbufferIndex = 0;
    }

    return temple;
}

float FIR::getLargestSample() {
    return std::max(1.0f, largestSample);
}